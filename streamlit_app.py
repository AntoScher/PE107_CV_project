import streamlit as st
import requests
import json
from parse_hh import get_html, extract_vacancy_data, extract_resume_data

DEEPSEEK_API_URL = "https://api.deepseek.com/chat/completions"
DEEPSEEK_MODEL = "deepseek-chat-r1"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –º–æ–¥–µ–ª—å

SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

1. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø—É–Ω–∫—Ç–∞–º:
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏
   - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
   - –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏ –æ–ø–∏—Å–∞–Ω—ã –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–µ–Ω–∏—è?)
   
2. –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5

3. –í—ã—Å—Ç–∞–≤—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç 1 –¥–æ 10

4. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã!
""".strip()

def request_deepseek(system_prompt, user_prompt, api_key):
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": DEEPSEEK_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        "temperature": 0.3,
        "max_tokens": 2000,
        "stop_token_ids": [32021]  # –í–∞–∂–Ω–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    }
    
    try:
        response = requests.post(
            DEEPSEEK_API_URL,
            headers=headers,
            data=json.dumps(payload),
            timeout=30
        )
        response.raise_for_status()
        result = response.json()
        return result['choices'][0]['message']['content']
    
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        return None
    except (KeyError, IndexError, json.JSONDecodeError) as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return None

# UI
st.title('üß† CV Scoring App (DeepSeek-R1)')

with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
    st.write("""
    1. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru
    2. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å hh.ru
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞
    """)

col1, col2 = st.columns(2)
with col1:
    job_url = st.text_input('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é hh.ru', placeholder="https://hh.ru/vacancy/12345")
with col2:
    resume_url = st.text_input('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ hh.ru', placeholder="https://hh.ru/resume/abcde")

if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", use_container_width=True):
    if not job_url or not resume_url:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–µ —Å—Å—ã–ª–∫–∏!")
        st.stop()

    with st.spinner("‚è≥ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek-R1..."):
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            job_html = get_html(job_url).text
            resume_html = get_html(resume_url).text

            job_text = extract_vacancy_data(job_html)
            resume_text = extract_resume_data(resume_html)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            st.session_state['last_job_len'] = len(job_text)
            st.session_state['last_resume_len'] = len(resume_text)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = f"""
            ## –í–ê–ö–ê–ù–°–ò–Ø
            {job_text}
            
            ## –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê
            {resume_text}
            
            –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ!
            """.strip()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ DeepSeek
            api_key = st.secrets["DEEPSEEK_API_KEY"]
            response = request_deepseek(SYSTEM_PROMPT, prompt, api_key)
            
            if response:
                st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ DeepSeek-R1")
                st.markdown(response)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                with st.expander("‚ÑπÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                    st.write(f"–ú–æ–¥–µ–ª—å: {DEEPSEEK_MODEL}")
                    st.write(f"–î–ª–∏–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {len(job_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    st.write(f"–î–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ: {len(resume_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")

        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            st.exception(e)
